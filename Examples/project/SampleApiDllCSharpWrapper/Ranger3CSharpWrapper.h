/**	@file	SampleApiDllCSharpWrapper.h
*
*	@brief	C# Wrapper Class of Ranger3.
*
*	@attention
*	This is the C# API wrapper of C++ Class Ranger3 and Ranger3Shared in ranger3.cpp|h.
*
*
*	@copyright	Copyright 2016-2020 SICK AG. All rights reserved.
*	@author		Vision Lab, SICK GCN
*	@version	2.0.0.0
*	@date		2019.10.15
*
*/

#pragma once

#include "ImgTCSharpWrapper.h"
#include "CommonFunctions.h"
#include <Ranger3.h>
#include <cliext\list>
#include <cliext\map>
#include <vcclr.h>
#include <msclr\lock.h>

#include <string>
#include <sstream>

#include <windows.h>

using namespace System;
using namespace System::Threading;
using namespace msclr;

namespace SICK3D
{

template<class T>
using SPtr = std::shared_ptr<T>;

template<class T>
using UPtr = std::unique_ptr<T>;


////////////////////////////////////////////////////////////////////////////////


public enum class CAM_STATUS
{
	All_OK = 0,
	CAM_IS_CONNECTED,
	CAM_IS_STARTED,
	CAM_IS_STOPPED,
	CAM_IS_DISCONNECTED,
	ERROR_OPEN_CAM,
	ERROR_SCAN_EMPTY_DEVICE,
	ERROR_CTI_NOT_FOUND,
	ERROR_OPEN_CONSUMER,
	ERROR_OPEN_TL_HANDLE,
	ERROR_EMPTY_IF_ID,
	ERROR_EMPTY_IF_HANDLE,
	ERROR_CSV_PATH,
	ERROR_XML_PATH,
	ERROR_EMPTY_PATH,
	ERROR_EMPTY_IMG,
	ERROR_SET_CAM,
	ERROR_CLO_CAM,				///< close camera error
	ERROR_GET_IMG,				///< range image
	ERROR_GET_SEN_IMG,				///< sensor image
	ERROR_RST_CAM,				///< restart camera error
	ERROR_UPDATE_PARA,				///< update parameters error
	ERROR_STOP_ACQUISITION,
	ERROR_START_ACQUISITION,
	ERROR_PARAMETER_FORMAT_DISMATCH,
	ERROR_PARAMETER_VALUE_DISMATCH,
	ERROR_PARAMETER_READ_ONLY,
	ERROR_PARAMETER_INVALID,
	ERROR_PARAMETER_VALUE_INVALID,
	ERROR_PARAMETERS_EMPTY,
	ERROR_SCAN_PARAMETERS,
	ERROR_COMMUNICATION,
	ERROR_SET_IP,
	ERROR_SET_SUBNET,
	ERROR_NULL_PTR_R3,				///< initial value if m_status.
	ERROR_NULL_DEV_HANDLE,
	ERROR_NULL_DS_HANDLE,
	ERROR_OPEN_DATASTREAM,
	ERROR_CAM_NOT_CONNECT,
	ERROR_CAM_NOT_START,
	ERROR_CAM_NOT_STOP,
	ERROR_CAM_NOT_DISCONNECT,
	ERROR_CAM_IS_CONNECTED,
	ERROR_CAM_IS_STARTED,
	ERROR_CAM_IS_STOPPED,
	ERROR_CAM_IS_DISCONNECTED,
	ERROR_IMAGE_NOT_READY,
	TIME_OUT,
	UNKNOWN,
	DEFAULT
};


public enum class RMethod
{
	Top,
	Mean,
	Bottom
};

private enum class RequireCode
{
	REQ_QUIT_RUN,
	REQ_STOP_CAMERA,
	REQ_Nothing
};

////////////////////////////////////////////////////////////////////////////////

static SPtr<R3S> gp_R3S;

typedef array<String^>^ deviceList;
public ref class GenICam3D
{
public:
	/**
	* @brief 请确保 cti 文件和 exe 文件处于同一文件夹内。 \n\n
	* CTI file should be in the same folder with exe.
	*
	* @param [in] logPath	日志文件路径，设为""则使用默认路径，详情见下。The log file path. if it equals to "", using the default. See below to find more.
	* @param [in] ctiPath	cti 文件路径，设为""则使用默认路径，详情见下。The cti file path. if it equals to "", using the default. See below to find more.
	* @param [in] enShow	true 则输出日志内容到命令行。  true means to print log to CMD.
	* @param [in] enWrite	true 则输出日志内容到文件。    true means to print log to file.
	*
	* @note 构造函数的基本动作包括\n
	* - 1. 设定该程序的最高优先级，保证在被 CPU 执行期间不受干扰。\n
	* - 2. 加载日志。默认文件路径为： exe 文件路径 + "_时间_log.txt"。\n
	* - 3. 加载 cti 文件。默认查找范围为 exe 文件所在文件夹。\n
	* scanDevice() 将会被构造函数调用，用于扫描所有已连接到电脑的设备。\n\n
	* Construction processes include :\n
	* - 1. Set thread priority as highest. \n
	* - 2. Load log file. The default path is exe-path + "_time_log.txt".\n
	* - 3. Load cti file, The default searching folder is exe-folder. \n
	* scanDevice() will be called by ctor to scan all device connected to PC.
	*/
	GenICam3D(	const String^ logPath, 
				const String^ ctiPath, 
				const bool enShow,
				const bool enWrite);
	
	~GenICam3D();

	/**
	* @brief 获取连接到电脑的设备名列表，以及设备对象指针。\n \n
	* To get the ptr map of devices.
	*
	* @return std::map<device_name_string, device_ptr>
	*/
	deviceList	getConDevList	();

	/**
	* @brief To get the ptr map of devices, marked with IP. \n\n
	* 获取连接到电脑的设备IP列表，以及设备对象指针。
	*
	* @return std::map<device_IP_string, device_ptr>
	*/
	deviceList	getConDevListIP	();

	/**
	* @brief 获取连接到电脑的设备列表。\n\n
	* To scan all device connected to PCP.
	*
	* @return
	* - ERROR_OPEN_TL_HANDLE	打开 GenTL 失败。Can not open GenTL of GenICam.
	* - ERROR_SCAN_EMPTY_DEVICE 没找到设备。No one is found.
	* - All_OK					找到设备。Found.
	*/
	CAM_STATUS	scanDevice		()	{ return static_cast<CAM_STATUS>(gp_R3S->scanDevice());}
	
	/**
	* @brief 加载 cti 文件。 \n\n
	* To load cti file of given path.
	*
	* @param [in] ctiPath	cti 文件路径。The cti file path.
	*
	* @note cti 文件由 SICK 生成。此函数将在 ctor 中调用。如果 ( isCtiFound() == false && isAvaliable() == false )，
	* 请手动调用它并传递有效的 cti 文件路径。 \n\n
	* The cti file is generated by SICK. This function will be called in ctor.
	* If ( isCtiFound() == false && isAvaliable() == false ), please call it manually and passing valid cti file path.
	*
	* @return
	* - ERROR_OPEN_CONSUMER		打开 consumer 失败。Can not open consumer model of GenICam.
	* - All_OK
	*/
	CAM_STATUS	loadCtiFile		(const String^ ctiPath)
									{ return static_cast<CAM_STATUS>(gp_R3S->loadCtiFile(StringRef2string(ctiPath)));}
	
	/**
	* @brief 获取初始化结果，检测 cti 文件 和 连接设备是否都存在。\n\n
	* To check initialization result. Check both CTI file and avaliable device
	*
	* @note 结果为：isCtiFound() && isDevFound();
	* @return
	* - true	OK. cti文件存在，并且找到连接设备。  Both CTI file and avaliable device found!
	* - false	未连接任何设备、设备未就绪或加载 cti 文件失败！ No device is connected, device is not ready or loading cti file failed!
	*/
	bool		isAvaliable		()	{ return gp_R3S->isAvaliable(); };
	
	/**
	* @brief 获取 cti 文件导入结果。 \n\n
	* To check load cti result.
	*
	* @return
	* - true	OK.
	* - false	cti 文件与 exe 不在同一文件夹中！ The cti file is not in the same folder as exe!
	*/
	bool		isCtiFound		()	{ return gp_R3S->isCtiFound(); };
	
	/**
	* @brief 获取设备扫描结果。\n\n
	* To check device scaning result.
	*
	* @return
	* - true	OK.
	* - false	未连接任何设备、设备未就绪！ No device is connected, device is not ready!
	*/
	bool		isDevFound		()	{ return gp_R3S->isDevFound(); };

	bool		isLogOutput		()	{ return gp_R3S->isLogOutput(); };
	bool		isLogToFile		()	{ return gp_R3S->isLogToFile(); };
	
	void 		_release		();

private:

};

////////////////////////////////////////////////////////////////////////////////

ref class CLR_Mutex {};
private ref class GrabberThread
{
public:
	GrabberThread(R3 * pr3);
	~GrabberThread	();
	
	void	run			();
	CSImgT^ getData();
	//CSImgT^ getDataHeadOnly();
	//void freeDataHead();


	bool	sendRequest	(const RequireCode req);
	
	bool	isFinishGrab() { return m_IsFinishGrab;}
	bool	isRun		() { return m_IsRun;}
	bool	isGrabbed() { return m_IsGrabbed; }

protected:
	// return true to break run().
	bool	_doRequest	();
	bool	_clear_and_break	();

private:
	R3 *  mp_R3;

	// modified by different threads
	cliext::list<CSImgT^> m_ImageData;
	RequireCode m_req;

	// status
	bool m_IsGrabbed;
	bool m_IsRun;
	bool m_IsFinishGrab;

	// locker
	Object^ locker_data;
	Object^ locker_req;

};

////////////////////////////////////////////////////////////////////////////////

private ref class GrabberCallback
{
public:
	GrabberCallback(R3 * pr3)
		: mp_R3(pr3) {}

private:
	R3 *  mp_R3;
	cliext::list<CSImgT^> m_ImageData;
	bool m_IsGrabbed;

};


////////////////////////////////////////////////////////////////////////////////

public ref class Ranger3
{
public:

	/**
	* @brief 使用 IP 或者 MAC 地址指定相机。 \n\n
	* Specify a device with IP or MAC.
	*
	* @param [in] ip_mac	IP 或者 MAC 地址。IP地址可以通过Ranger3Studio 或者 MFC demo 中找到。请看 R3S::scanDevice() 中展示的扫描过程。
	*	IP 示例："192.168.0.12"。Mac 地址可以在设备的标签上找到。Mac 示例："0006770c69e1"。 \n
	*	IP / Mac address. IP can be found by Ranger3Studio or MFC demo. Please see R3S::scanDevice().
	*	IP example: "192.168.0.12". Mac address can be found on the surface of device. Mac example : "0006770c69e1"
	* @param [in] useIP		置为 true 表示使用 IP 地址。  Set true to use IP.
	*/
	Ranger3(const String ^ ip_mac, const bool isIP);
	~Ranger3();

public:
	
	/**
	* @brief 获取初始化结果。\n\n
	* To get initialization result.
	*
	* @return
	* - ERROR_NULL_PTR_R3	初始化失败。  Initialize failed.
	* - All_OK
	*/
	CAM_STATUS	isReady();

	/**
	* @brief 连接相机 \n\n
	* Connect a camera.
	*	
	* @param [in] enable_CPP_Grab_thread	必须设置为 true。  Must set it true;
	*
	* @note 连接相机的动作包括：打开设备句柄，打开数据流句柄，加载参数文件，扫描相机参数。
	* 当相机连接时，采集图像过程并没有开始。\n\n
	* It will open device handle, open datastream, loading parameters file, scan parameters in device.
	* When camera is connected, image acquition is not started.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED	相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_STOPPED	相机处于 stop 状态。  Camera is stopped.
	* - ERROR_SCAN_PARAMETERS	扫描相机参数时发生错误。 Error happened when scaning parameters in device.
	*/
	CAM_STATUS	connectCamera(const bool enable_CPP_Grab_thread);

	/**
	* @brief 开始采集 \n\n
	* Start acquisition.
	*
	* @note 开始采集的动作包括：加载标定文件，申请相机缓存，锁定相机参数，开始采集图像。\n\n
	* It will load calibration file, initialize device buffer, lock device parameter, start acquisition.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	* - ERROR_START_ACQUISITION		相机开始采集失败。  Failed to start acquisition.
	* - ERROR_XML_PATH				使用标定文件初始化标定变量错误。 Error happened when initialzing calibration variables.
	*/
	CAM_STATUS	startCamera();


	/** Stop acquisition. */
	/**
	* @brief 停止采集 \n\n
	* Stop acquisition.
	*
	* @note 停止采集的动作包括：停止采集图像，解锁相机参数，清除相机缓存。\n\n
	* It will stop acquisition, unlock device parameter, free device buffer.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_CONNECTED		相机处于 connect 状态。  Camera is connected.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	* - ERROR_STOP_ACQUISITION		相机停止采集失败。  Failed to stop acquisition.
	*/
	CAM_STATUS	stopCamera();

	/**
	* @brief 断开相机连接 \n\n
	* Disconnect a camera.
	*
	* @note 断开相机连接的动作包括：关闭数据流句柄，关闭设备句柄。\n\n
	* It will close datastream, close device handle.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED	相机处于 start 状态。  Camera is started.
	*/
	CAM_STATUS	disconnectCamera();
	
	/**
	* @brief 获取图像 \n\n
	* Get output images.
	*
	* @param [out] imgTable		Images data;
	*
	* @note 相机必须处于 start 状态时才可以采集图像。请注意，非线程安全。\n\n
	* Camera must be started! And it is not thread-safe.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED	相机处于 start 状态。  Camera is started.
	* - ERROR_IMAGE_NOT_READY	线程未采集到图像，CLR 部分独有。
	*/
	CAM_STATUS	getImageData(CSImgT^ imgTable);

	
	////////////////////////////////////////////////////////////////////////////////

	/**
	* @brief 设置标定的矫正方法 \n\n
	* Set rectification methos.
	*
	* @param [in] value		Top(defalut) / Mean / Buttom.
	*
	* @note 详见标定过程的介绍。\n\n
	* More details please see the user documents.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	*/
	CAM_STATUS		setRectMethos	(const RMethod value)
					{ return static_cast<CAM_STATUS>(mp_R3->setRectMethos(static_cast<SickCam::RectMethod>(value))); };
	
	/**
	* @brief 设置 Y 方向分辨率 \n\n
	* Set scale in Y axis.
	*
	* @param [in] value		value = (y_range_in_mm) / (profiles_number).
	*
	* @note
	* 点云 y 坐标 = Y_offset + Y_scale * Y_pixelValueInRange。 \n\n
	* Y value of a pointcloud = Y_offset + Y_scale * Y_pixelValueInRange.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	*/
	CAM_STATUS		setScaleY		(const double value)	{ return static_cast<CAM_STATUS>(mp_R3->setScaleY(value)); };
	
	/**
	* @brief 设置空数据的像素值 \n\n
	* Set missing data.
	*
	* @param [in] value		用于填补空数据的像素值，默认 NAN 。  The value to fillin the empty pixels, the default is NAN.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。 Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。 Camera is disconnected.
	*/
	CAM_STATUS		setMissingData	(const float value)		{ return static_cast<CAM_STATUS>(mp_R3->setMissingData(value)); };
	
	/**
	* @brief 设置标定文件的路径 \n\n
	* Set calibration file path.
	*
	* @param [in] value		若 value 为空，则输出未标定的原始数据据。  If value=="", output uncalibrated image.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	*/
	CAM_STATUS		setCalibraPath	(const String^ value);
	
	/**
	* @brief 设置参数文件路径 \n\n
	* Set parameters file path.
	*
	* @param [in] value		若 value 为空，则使用相机的默认参数。  If value=="", using device inner parameters.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	*/
	CAM_STATUS		setParametPath	(const String^ value);
	
	/**
	* @brief 设置相机取图的最大等待时间 \n\n
	* Set timeout.
	*
	* @param [in] value		相机取图的最大等待时间，单位毫秒。   Maximum waiting time when grabbing image, unit is millimeter.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。  Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。  Camera is disconnected.
	*/
	CAM_STATUS		setTimeOut		(const int value)		{ return static_cast<CAM_STATUS>(mp_R3->setTimeOut(value)); };
	
	/**
	* @brief 设置是否进行矫正 \n\n
	* Set to rectify or not.
	*
	* @param [in] value		控制是否进行矫正。  To rectify or not.
	*
	* @note 临时保留，建议设置为 true。\n\n
	* temporary parameter, set to true.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		 Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	 Camera is disconnected.
	*/
	CAM_STATUS		setDoRectify	(const bool	value)		{ return static_cast<CAM_STATUS>(mp_R3->setDoRectify(value)); };
	
	/**
	* @brief 设置图像缓存的张数 \n\n
	* Set the number of image buffers.
	*
	* @param [in] value		图像缓存的张数。  The number of image buffers.
	*
	* @note 默认是 20 ，最小可以设置为 1。设置越大，内存占用越多。设置太小，有丢帧风险。\n\n
	* The default is 20, avaliable minimum value can be 1. The bigger value, the more memory will be allocated. The smaller value, the higher risk of miss a frame.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		 Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	 Camera is disconnected.
	*/
	CAM_STATUS		setBufferCount	(const int value)		{ return static_cast<CAM_STATUS>(mp_R3->setBufferCount(value)); };

	/**
	* @brief 设置 IP 地址\n\n
	* Set IP address.
	*
	* @param [in] IP			IP地址。  The new IP to be set.
	* @param [in] isPersistent	true 表示设置永久性的 IP。   true means to set persistent IP.
	*
	* @par 详细说明 Introduction
	* 设置相机的 IP/Subnet 的过程较为复杂。请严格按照这里给出的说明操作。
	* 相机的 IP/Subnet 设置分为“永久性 IP/Subnet 设置” 与 “临时性 IP/Subnet 设置”。  \n
	* When setting IP, please follow the description here strictly;
	* The settings include "Persistent IP/Subnet setting" and "Temporary IP/Subnet setting".
	*
	* @par 永久性 IP/Subnet 设置  Persisitent IP/Subnet setting.
	* 相机必须处于 connected 或者 stopped 状态。请将"isPersistent"设置为 true 以执行持久设置。
	* 关闭电源时，IP 将被保留。 \n
	* Camera must be connected or stopped. Please set "isPersistent" as true to perform persistent setting.
	* The IP will be kept when power off.
	*
	* @note 执行“永久性 IP/Subnet设置”时，设置成功后，setIP() 将返回 CAM_STATUS::ALL_OK。
	* <但是> 您必须调用 R3S::scanDevice() 以重新扫描所有设备！然后再次连接相机。\n
	* When executing "Persistent IP/Subnet setting", if setting successfully,
	* setIP() will return CAM_STATUS::ALL_OK. <BUT> You must call R3S::scanDevice()
	* to scan all device again! And after that, re-connect the device.
	*
	*
	* @par 临时性 IP/Subnet 设置  Force IP, temporary IP/Subnet setting.
	* 相机必须处于 disconnected 状态。请将"isPersistent"设置为 false。它将执行"ForcoIP"，
	* 这将设置临时 IP/Subnet。关闭电源后，新设置的 IP/Subnet 将丢失，
	* 设备将恢复成设置前的 IP/Subnet 地址。 \n
	* Camera must be disconnected. Please set "isPersistent" as false;
	* It will perform temporary IP/Subnet setting
	* which has been called "ForceIP". The new IP will be lost when power off.
	*
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	Camera is disconnected.
	* - ERROR_SET_IP				相机设置失败。				Setting failed.
	*
	* @note 相机处于 started 状态时，不可执行以上任何一种设置。\n\n
	* When camera is started, neither settings is avaliable.
	*/
	CAM_STATUS	setIp			(const String^ IP, const bool isPersistent);
	
	/**
	* @brief 设置 Subnet 地址\n\n
	* Set Subnet address.
	*
	* @param [in] Su			IP地址。  The new IP to be set.
	* @param [in] isPersistent	true 表示设置永久性的 IP。   true means to set persistent IP.
	*
	* @par 详细说明 Introduction
	* 设置相机的 IP/Subnet 的过程较为复杂。请严格按照这里给出的说明操作。
	* 相机的 IP/Subnet 设置分为“永久性 IP/Subnet 设置” 与 “临时性 IP/Subnet 设置”。  \n
	* When setting IP, please follow the description here strictly;
	* The settings include "Persistent IP/Subnet setting" and "Temporary IP/Subnet setting".
	*
	* @par 永久性 IP/Subnet 设置  Persisitent IP/Subnet setting.
	* 相机必须处于 connected 或者 stopped 状态。请将"isPersistent"设置为 true 以执行持久设置。
	* 关闭电源时，IP 将被保留。 \n
	* Camera must be connected or stopped. Please set "isPersistent" as true to perform persistent setting.
	* The IP will be kept when power off.
	*
	* @note 执行“永久性 IP/Subnet设置”时，设置成功后，setIP() 将返回 CAM_STATUS::ALL_OK。
	* <但是> 您必须调用 R3S::scanDevice() 以重新扫描所有设备！然后再次连接相机。\n
	* When executing "Persistent IP/Subnet setting", if setting successfully,
	* setIP() will return CAM_STATUS::ALL_OK. <BUT> You must call R3S::scanDevice()
	* to scan all device again! And after that, re-connect the device.
	*
	*
	* @par 临时性 IP/Subnet 设置  Force IP, temporary IP/Subnet setting.
	* 相机必须处于 disconnected 状态。请将"isPersistent"设置为 false。它将执行"ForcoIP"，
	* 这将设置临时 IP/Subnet。关闭电源后，新设置的 IP/Subnet 将丢失，
	* 设备将恢复成设置前的 IP/Subnet 地址。 \n
	* Camera must be disconnected. Please set "isPersistent" as false;
	* It will perform temporary IP/Subnet setting
	* which has been called "ForceIP". The new IP will be lost when power off.
	*
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	Camera is disconnected.
	* - ERROR_SET_SUBNET			相机设置失败。				Setting failed.
	*
	* @note 相机处于 started 状态时，不可执行以上任何一种设置。\n\n
	* When camera is started, neither settings is avaliable.
	*/
	CAM_STATUS	setSubnet		(const String^ Su, const bool isPersistent);
	
	/**
	* @brief 设置设备参数，即 csv 文件中的参数。\n\n
	* Set the device parameters, which are shown in csv file.
	*
	* @param [in] ParamterName		在csv文件的参数名。 Name shown in csv file.
	* @param [in] value				The new value to be set.
	*
	* @note 设置参数时，相机必须处于 connected 或者 stopped。\n\n
	* The camera must be connected or stopped when setting parameters.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	Camera is disconnected.
	* - ERROR_PARAMETER_INVALID		设置失败。					Setting failed.
	*/
	CAM_STATUS	setParameterValue(const String^ ParamterName, const String^ value);


	////////////////////////////////////////////////////////////////////////////////

	/**
	* @brief 读取标定的矫正方法 \n\n
	* Get rectification methos.
	*
	* @note 详见标定过程的介绍。\n\n
	* More details please see the user documents.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	RMethod	getRectMethos	()	{ return static_cast<RMethod>(mp_R3->getRectMethos());}
	
	/**
	* @brief 读取 Y 方向分辨率 \n\n
	* Get scale in Y axis.
	*
	* @param [in] value		value = (y_range_in_mm) / (profiles_number).
	*
	* @note
	* 点云 y 坐标 = Y_offset + Y_scale * Y_pixelValueInRange。 \n\n
	* Y value of a pointcloud = Y_offset + Y_scale * Y_pixelValueInRange.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	double	getScaleY		()	{ return mp_R3->getScaleY		();}
	
	/**
	* @brief 读取空数据的像素值 \n\n
	* Get missing data.
	*
	* @note MissingData 表示用于填补空数据的像素值，默认 NAN 。  \n\n
	* The value is to fillin the empty pixels, the default is NAN.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	float	getMissingData	()	{ return mp_R3->getMissingData	();}
	
	/**
	* @brief 读取标定文件的路径 \n\n
	* Get calibration file path.
	*
	* @return
	* - "" 空字符串表示未导入标定文件，输出未标定的原始数据据。  Empty string. No calibration file, output uncalibrated image.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	String^	getCalibraPath	();
	
	/**
	* @brief 读取参数文件路径 \n\n
	* Get parameters file path.
	*
	* @return
	* - "" 空字符串表示未导入参数文件。  Empty string. Mo parameters file.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	String^	getParametPath	();
	
	/**
	* @brief 读取相机取图的最大等待时间，单位毫秒 \n\n
	* Get maximum waiting time when grabbing image, unit is millimeter.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	int		getTimeOut		()	{ return static_cast<int>(mp_R3->getTimeOut());}
	
	/**
	* @brief 读取是否进行矫正 \n\n
	* Get to rectify or not.
	*
	* @note 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* Camera shoudl be connected or stopped.
	*/
	bool	getDoRectify	()	{ return mp_R3->getDoRectify	();}
	
	/**
	* @brief 读取图像缓存的张数 \n\n
	* Get the number of image buffers.
	*
	* @note 默认是 20 ，最小可以设置为 1。设置越大，内存占用越多。设置太小，有丢帧风险。
	* 建议在相机处于 connected 或者 Stopped 状态时，执行该操作。\n\n
	* The default is 20, avaliable minimum value can be 1. The bigger value, the more memory will be allocated. The smaller value, the higher risk of miss a frame.
	* Camera shoudl be connected or stopped.
	*/
	int		getBufferCount	()	{ return static_cast<int>(mp_R3->getBufferCount());}

	/**
	* @brief 读取 IP 地址\n\n
	* Get IP address.
	*
	* @param [in] isPersistent	true 表示读取永久性的 IP。   true means to get persistent IP.
	*
	* @return
	* - "" 错误返回空字符串。  return empty string when error happened.
	*
	* @par 详细说明 Introduction
	* 读取相机的 IP/Subnet 时，请严格按照这里给出的说明操作。
	* 相机的 IP/Subnet 分为“永久性 IP/Subnet ” 与 “临时性 IP/Subnet ”。  \n
	* When getting IP, please follow the description here strictly;
	* The IP/Subnet include "Persistent IP/Subnet" and "Temporary IP/Subnet".
	*
	* @par 永久性 IP/Subnet   Persisitent IP/Subnet.
	* 相机必须处于 connected 或者 stopped 状态。请将"isPersistent"设置为 true 以执行读取“永久性 IP”。 \n
	* Camera must be connected or stopped. Please set "isPersistent" as true to get persistent IP.
	*
	* @par 临时性 IP/Subnet  Force IP, temporary IP/Subnet.
	* 相机必须处于 disconnected 状态。请将"isPersistent"设置为 false。它将执行"ForcoIP" \n
	* Camera must be disconnected. Please set "isPersistent" as false;
	* It will get temporary IP/Subnet
	*
	* @note 相机处于 started 状态时，不可执行以上任何一种设置。\n\n
	* When camera is started, neither settings is avaliable.
	*/
	String^	getIp			(const bool isPersistent);
	
	/**
	* @brief 读取 Subnet \n\n
	* Get Subnet.
	*
	* @param [in] isPersistent	true 表示读取永久性的 Subnet。   true means to get persistent Subnet.
	*
	* @return
	* - "" 错误返回空字符串。  return empty string when error happened.
	*
	* @par 详细说明 Introduction
	* 读取相机的 IP/Subnet 时，请严格按照这里给出的说明操作。
	* 相机的 IP/Subnet 分为“永久性 IP/Subnet ” 与 “临时性 IP/Subnet ”。  \n
	* When getting IP, please follow the description here strictly;
	* The IP/Subnet include "Persistent IP/Subnet" and "Temporary IP/Subnet".
	*
	* @par 永久性 IP/Subnet   Persisitent IP/Subnet.
	* 相机必须处于 connected 或者 stopped 状态。请将"isPersistent"设置为 true 以执行读取“永久性 IP”。 \n
	* Camera must be connected or stopped. Please set "isPersistent" as true to get persistent IP.
	*
	* @par 临时性 IP/Subnet  Force IP, temporary IP/Subnet.
	* 相机必须处于 disconnected 状态。请将"isPersistent"设置为 false。它将执行"ForcoIP" \n
	* Camera must be disconnected. Please set "isPersistent" as false;
	* It will get temporary IP/Subnet
	*
	* @note 相机处于 started 状态时，不可执行以上任何一种设置。\n\n
	* When camera is started, neither settings is avaliable.
	*/
	String^	getSubNet		(const bool isPersistent);
	
	/**
	* @brief MAC 地址支持任何相机状态下读取。MAC 地址不可修改，出厂固定。\n\n
	* MAC. can be queried in any camera status. MAC. is unchangable.
	*
	* @return
	* - "" 错误返回空字符串。  return "" when error happened.
	*/
	String^	getMac			();
	
	/**
	* @brief 设备名格式： "SICKGigEVisionTL_DEV_" + mac + "_Ranger3" \n\n
	* Device name format : "SICKGigEVisionTL_DEV_" + mac + "_Ranger3"
	*
	* @return
	* - "" 错误返回空字符串。  return "" when error happened.
	*
	* @note 支持任何相机状态下读取。\n\n
	* It can be queried in any camera status..
	*/
	String^	getDeviceName	();
	
	/**
	* @brief 读取 csv 文件中的相机参数。 \n\n
	* Get the device parameters shown in csv file.
	*
	* @param [in] ParamterName		参数名，可以在 csv 文件中找到。  Parameter name. It can be found in csv file.
	*
	* @return
	* - "" 错误返回空字符串。  return empty string when error happened.
	*
	* @note 相机必须处于 connected 或者 stopped 状态。\n\n
	* The camera must be connected or stopped when calling this.
	*/
	String^	getParameterValue(const String^ ParamterName);


	////////////////////////////////////////////////////////////////////////////////

	/**
	* @brief 保存参数文件为 csv 格式。
	* Save parameters to file.
	*
	* @param [in] path		csv 文件路径。  csv file path.
	*
	* @note 相机必须处于 connected 或者 stopped 状态。只有相机的内部参数才会被保存。\n\n
	* The camera must be connected or stopped when calling this. Only device parametars will be saved.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	Camera is disconnected.
	* - ERROR_CSV_PATH				文件打开失败。				Open file failed.
	*/
	CAM_STATUS	saveParameterToCSV	(const String^ path);
	
	/**
	* @brief 加载 csv 参数文件。\n\n
	* Load parameters from file.
	*
	* @param [in] path		csv 文件路径。  csv file path.
	*
	* @note 相机必须处于 connected 或者 stopped 状态。csv 参数文件必须和相机的固件版本相兼容。
	* 否则会导入失败。 \n\n
	* The camera must be connected or stopped when calling this. 
	* The parameters version in CSV file must match the device. If not, it might be failed.
	*
	* @return
	* - All_OK
	* - ERROR_CAM_IS_STARTED		相机处于 start 状态。		Camera is started.
	* - ERROR_CAM_IS_DISCONNECTED	相机处于 disconnect 状态。	Camera is disconnected.
	* - ERROR_CSV_PATH				文件打开失败。				Open file failed.
	*/
	CAM_STATUS	loadParameterFrCSV	(const String^ path);


	////////////////////////////////////////////////////////////////////////////////

	/**
	* @brief 更新相机参数。\n\n
	* Update device parameters.
	*
	* @return
	* - true    更新完成。  Updating done.
	* - false	更新失败。  Updating failed.
	*/
	bool			updateParamtersInfo	();
	
	/**
	* @brief 读取参数的所有分类名。\n\n
	* Get categories of device parameters.
	*
	* @note updateParamtersInfo()必须先行调用。 \n\n
	* Please call updateParamtersInfo() before this.
	*/
	array<String^>^ paramCategoryList	();

	/**
	* @brief 读取指定分类名下的所有参数全名。\n\n
	* Get full-name of device parameters of given category.
	*
	* @note 全名是指 csv 文件中显示的参数名。 updateParamtersInfo()必须先行调用。 \n\n
	* Full-name is shown in csv file. Please call updateParamtersInfo() before this.
	*/
	array<String^>^ paramFullNameOfCategory(const String^ categoryName);
	
	/**
	* @brief 读取所有参数全名。\n\n
	* Get full-name of all device parameters.
	*
	* @note 全名是指 csv 文件中显示的参数名。 updateParamtersInfo()必须先行调用。 \n\n
	* Full-name is shown in csv file. Please call updateParamtersInfo() before this.
	*/
	array<String^>^ paramFullNameList	();
	
	/**
	* @brief 读取指定全名参数的当前设定值。\n\n
	* Get current value of given full-name.
	*
	* @note 全名是指 csv 文件中显示的参数名。 updateParamtersInfo()必须先行调用。 \n\n
	* Full-name is shown in csv file. Please call updateParamtersInfo() before this.
	*/
	String^			paramCurrentValue	(const String^ paramFullName);
	
	/**
	* @brief 读取指定全名参数的可选设定值。\n\n
	* Get optional value of given full-name.
	*
	* @note 全名是指 csv 文件中显示的参数名。 updateParamtersInfo()必须先行调用。 \n\n
	* Full-name is shown in csv file. Please call updateParamtersInfo() before this.
	*/
	array<String^>^ paramOptionalValues	(const String^ paramFullName, int% currentValueId);

	/**
	*@brief 读取相机状态。  \n\n
	* Get camera status.
	*
	* @return
	* - CAM_IS_CONNECTED 相机已连接 Connected
	* - CAM_IS_STARTED 相机开始采集 Start acquisition
	* - CAM_IS_STOPPED 相机停止采集 Stop acquisition
	* - CAM_IS_DISCONNECTED 相机未连接 Disconnected
	* - ERROR_NULL_PTR_R3 类 Ranger3 的对象未初始化完成。 Class Ranger3 initialization undone.
	*/
	CAM_STATUS	getStatus	()	{ return static_cast<CAM_STATUS>(mp_R3->getStatus()); };
	
	/**
	* @brief 读取图像序号，也是当前取到的图像总数，stop 后清理。  \n\n
	* Get image ID. The value is also the number of grabbed image. Reset to 0 when stopped.
	*
	* @note 0初始。相机必须处于 connected 或者 stopped 状态。\n\n
	* Start from 0. The camera must be connected or stopped when calling this.
	*/
	int			getImgID	()	{ return static_cast<int>(mp_R3->getImgID()); }


	////////////////////////////////////////////////////////////////////////////////

	bool isGrabbed() { return mp_gt->isGrabbed(); }

protected:


private:
	R3 *  mp_R3;

	////////////////////////////////////////////////////////////////////////////////

	SickCam::Categories	* mp_cate;
	SickCam::Params		* mp_map_Cata_ParamStr;
	SickCam::AllParams	* mp_map_allPramPtr;
	
	////////////////////////////////////////////////////////////////////////////////

	bool			  m_enable_CPP_Grab_thread;
	Thread^			  m_Thread;
	//RequireCode		  m_Req;
	GrabberThread^ 	  mp_gt;

	Object^			  locker_GetData;

};

////////////////////////////////////////////////////////////////////////////////

public ref class VER
{
public:
	VER() {};
	~VER() {};

	String^ __Version__();

};




}
